# scripts/resumo_e_classificacao.py
import os
import requests
import json
from pathlib import Path

# --- Configura√ß√µes (poderiam vir de config.py) ---
MODELO_OLLAMA = "mistral" # ou outro modelo que voc√™ preferir
PALAVRAS_TECNICAS = ["tabela verdade", "porta l√≥gica", "and", "or", "xor", "circuito", "sensor", "bin√°rio", "arduino", "processador", "mem√≥ria", "barramento"]
PALAVRAS_RUIDO = ["moza", "tr√¢nsito", "conversas", "boneco", "pet", "telefone", "Curitiba", "motorista", "Uber", "dirigir"] # Adicionadas mais palavras-chave de ru√≠do

def resumir_e_classificar_bloco(conteudo_bloco, model="llama3"):
    """
    Pede √† IA para retornar OU um resumo t√©cnico OU uma palavra-chave de descarte.
    """
    prompt_instrucao = f"""Sua tarefa √© analisar o texto de uma transcri√ß√£o de aula e retornar uma de duas coisas. Siga as regras com precis√£o.

REGRAS:
1. Se o texto contiver conte√∫do t√©cnico √∫til (l√≥gica, hardware, programa√ß√£o, matem√°tica), resuma estes pontos em portugu√™s. Sua resposta deve ser APENAS o resumo.
2. Se o texto for primariamente uma conversa pessoal, anedota, ou ru√≠do irrelevante, sua resposta deve ser APENAS a palavra-chave exata: RU√çDO_DESCARTAR

N√£o inclua nenhuma outra palavra, explica√ß√£o ou formata√ß√£o na sua resposta.

Texto para an√°lise:
\"\"\"
{conteudo_bloco}
\"\"\"
"""
    payload = {
        "model": model,
        "messages": [{"role": "user", "content": prompt_instrucao}],
        "stream": False
    }

    try:
        response = requests.post("http://localhost:11434/api/chat", json=payload, timeout=300)
        response.raise_for_status()
        resumo_gerado = response.json()["message"]["content"].strip()

        # L√≥gica de classifica√ß√£o mais estrita
        if resumo_gerado == "RU√çDO_DESCARTAR":
            classificacao = "‚ùå Ru√≠do"
            resumo = "Bloco classificado como ru√≠do e descartado." 
        else:
            classificacao = "‚úÖ √ötil t√©cnico"
            resumo = resumo_gerado

        return resumo, classificacao

    except requests.exceptions.RequestException as e:
        print(f"Erro na requisi√ß√£o ao Ollama: {e}")
        return None, "‚ùå Erro"
def resumir_blocos(input_dir, output_dir):
    """
    Processa todos os arquivos de bloco em um diret√≥rio,
    gera seus resumos e os classifica, salvando-os.
    """
    os.makedirs(output_dir, exist_ok=True)
    arquivos_blocos = sorted([f for f in os.listdir(input_dir) if f.endswith(".txt")])

    for arquivo in arquivos_blocos:
        caminho_bloco = Path(input_dir) / arquivo
        with open(caminho_bloco, "r", encoding="utf-8") as f:
            conteudo = f.read()

        print(f"  üìù Resumindo e classificando {arquivo}...", end='')
        resumo, classificacao = resumir_e_classificar_bloco(conteudo)

        if resumo:
            nome_saida = arquivo.replace("bloco", "resumo")
            with open(Path(output_dir) / nome_saida, "w", encoding="utf-8") as f_out:
                f_out.write(f"üîπ {nome_saida.replace('.txt','').replace('_', ' ').title()} - {classificacao}\n\n")
                f_out.write(resumo + "\n")
            print(f" {classificacao} - Salvo: {nome_saida}")
        else:
            print(f" Falha ao processar {arquivo}")

if __name__ == "__main__":
    # Exemplo de uso direto: python scripts/resumo_e_classificacao.py blocos/ resumos/
    import sys
    if len(sys.argv) == 3:
        resumir_blocos(sys.argv[1], sys.argv[2])
    else:
        print("Uso: python scripts/resumo_e_classificacao.py <diretorio_entrada_blocos> <diretorio_saida_resumos>")
        
def limpar_bloco_com_ia(texto_bloco, model="llama3"):
    """Usa um modelo de IA para remover ru√≠dos de fala de um bloco de texto."""
    prompt_instrucao = """Sua √∫nica tarefa √© pegar o texto a seguir, que √© parte de uma transcri√ß√£o de aula, e remover apenas as interjei√ß√µes, hesita√ß√µes, palavras de preenchimento (como 'n√©', 'tipo', 'ent√£o', 'aham') e repeti√ß√µes. N√ÉO altere o conte√∫do t√©cnico nem reformule frases. Retorne APENAS o texto limpo."""

    payload = {
        "model": model,
        "messages": [{"role": "user", "content": f"{prompt_instrucao}\n\n---TEXTO---\n{texto_bloco}"}],
        "stream": False
    }
    try:
        response = requests.post("http://localhost:11434/api/chat", json=payload, timeout=300)
        response.raise_for_status()
        return response.json()["message"]["content"].strip()
    except requests.exceptions.RequestException as e:
        print(f"\nAviso: Falha na limpeza com IA do bloco. Usando texto original. Erro: {e}")
        return texto_bloco