import subprocess
import re
import sys
import io
import os
import time

# --- Configura√ß√µes ---
ARQUIVO_ENTRADA = "resumo_final.md"
ARQUIVO_SAIDA = "resumo_final_revisado.md"
MODELO_OLLAMA = "mixtral" # Mude aqui se quiser usar outro modelo (ex: "llama3")

# For√ßa a sa√≠da do terminal como UTF-8
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

def verificar_ollama():
    """Verifica se o comando 'ollama' est√° dispon√≠vel no sistema."""
    try:
        subprocess.run(["ollama", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        print("‚úÖ Ollama encontrado no sistema.")
        return True
    except FileNotFoundError:
        print("‚ùå ERRO: O comando 'ollama' n√£o foi encontrado. Por favor, instale o Ollama e adicione-o ao seu PATH.", file=sys.stderr)
        return False
    except subprocess.CalledProcessError as e:
        print(f"‚ùå ERRO ao verificar o Ollama: {e.stderr.decode('utf-8').strip()}", file=sys.stderr)
        return False

def carregar_resumo():
    """Carrega o conte√∫do do arquivo de resumo."""
    print(f"üìÑ Carregando conte√∫do de '{ARQUIVO_ENTRADA}'...")
    try:
        with open(ARQUIVO_ENTRADA, "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        print(f"‚ùå ERRO: O arquivo '{ARQUIVO_ENTRADA}' n√£o foi encontrado. Certifique-se de que ele est√° no mesmo diret√≥rio do script.", file=sys.stderr)
        sys.exit(1) # Sai do script se o arquivo n√£o for encontrado

def separar_blocos(texto):
    """Separa o texto principal em blocos baseados nos t√≠tulos de resumo."""
    print("‚úÇÔ∏è Separando o conte√∫do em blocos para an√°lise...")
    # O re.split inclui o delimitador no resultado quando o delimitador est√° entre par√™nteses
    blocos = re.split(r"(### üìå Resumo_\d+ - ‚úÖ √ötil t√©cnico)", texto)
    
    blocos_processados = []
    # O primeiro elemento de blocos pode ser texto antes do primeiro t√≠tulo, ou vazio.
    # Queremos emparelhar o t√≠tulo com o conte√∫do que o segue.
    # Iteramos de 1 em 2 para pegar o t√≠tulo e seu conte√∫do.
    for i in range(1, len(blocos), 2):
        if i + 1 < len(blocos): # Garante que h√° conte√∫do ap√≥s o t√≠tulo
            titulo = blocos[i].strip()
            conteudo = blocos[i + 1].strip()
            blocos_processados.append((titulo, conteudo))
    
    if not blocos_processados:
        print("‚ö†Ô∏è Aten√ß√£o: Nenhum bloco de resumo t√©cnico encontrado no arquivo. Verifique o formato dos t√≠tulos '### üìå Resumo_X - ‚úÖ √ötil t√©cnico'.")
    else:
        print(f"üëç {len(blocos_processados)} blocos encontrados para an√°lise.")
    return blocos_processados

def rodar_ollama(trecho):
    """
    Chama o modelo Ollama para revisar um trecho de texto,
    adicionando feedback visual durante o processo.
    """
    prompt = f"""Voc√™ √© um assistente t√©cnico. Revise o seguinte conte√∫do e aponte **apenas os erros t√©cnicos ou explica√ß√µes confusas** (ex: erros sobre portas l√≥gicas, sensores, circuitos), e reescreva a parte corrigida em **formato markdown**, mantendo clareza e concis√£o. Ignore erros gramaticais irrelevantes.

Texto a revisar:
\"\"\"
{trecho}
\"\"\"

Retorne somente:
1. Uma explica√ß√£o sobre o erro, se houver.
2. O trecho reescrito corrigido, com marca√ß√£o markdown.
"""
    
    print(f"‚è≥ Chamando {MODELO_OLLAMA} (isso pode levar alguns segundos)...", end='', flush=True)
    processo = subprocess.Popen(
        ["ollama", "run", MODELO_OLLAMA],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )

    # Escreve o prompt para a entrada padr√£o do processo ollama
    processo.stdin.write(prompt.encode('utf-8'))
    processo.stdin.close() # Fecha a entrada para sinalizar que terminamos de enviar dados

    saida_bruta = []
    erros_brutos = []

    # L√™ a sa√≠da em tempo real e imprime pontos de progresso
    while True:
        stdout_line = processo.stdout.readline()
        stderr_line = processo.stderr.readline()

        if stdout_line:
            saida_bruta.append(stdout_line)
            # print(".", end='', flush=True) # Feedback de progresso
            # Remover o ponto em tempo real para n√£o poluir o terminal,
            # o feedback "Rodando modelo..." j√° √© suficiente.
        if stderr_line:
            erros_brutos.append(stderr_line)
            # print("e", end='', flush=True) # Feedback de erro, se houver

        if not stdout_line and not stderr_line and processo.poll() is not None:
            break
        # Pequena pausa para evitar consumo excessivo de CPU em loop apertado
        time.sleep(0.05)

    saida_completa = b"".join(saida_bruta).decode('utf-8').strip()
    erros_completo = b"".join(erros_brutos).decode('utf-8').strip()

    # Verifica o c√≥digo de retorno final do processo
    returncode = processo.wait()

    if returncode != 0:
        print(f"\n‚ùå ERRO do Ollama (c√≥digo {returncode}):")
        print(f"Detalhes do erro: {erros_completo}", file=sys.stderr)
        return f"üö® ERRO: N√£o foi poss√≠vel obter resposta do modelo {MODELO_OLLAMA}. Verifique os logs acima."
    
    print(" ‚úÖ Conclu√≠do!")
    return saida_completa

def main():
    print("üöÄ Iniciando o script de revis√£o t√©cnica com Ollama!\n")
    
    if not verificar_ollama():
        sys.exit(1) # Sai se o Ollama n√£o estiver dispon√≠vel

    texto_original = carregar_resumo()
    blocos = separar_blocos(texto_original)

    if not blocos:
        print("Nenhum bloco v√°lido para processar. Encerrando.")
        return

    conteudo_revisado = []

    # Adiciona qualquer texto antes do primeiro bloco processado
    # Isso √© importante para manter o in√≠cio do arquivo se ele n√£o come√ßar com um t√≠tulo de bloco
    primeiro_titulo = blocos[0][0] if blocos else None
    if primeiro_titulo:
        match = re.search(r"(### üìå Resumo_\d+ - ‚úÖ √ötil t√©cnico)", texto_original)
        if match:
            texto_antes_primeiro_bloco = texto_original[:match.start()]
            conteudo_revisado.append(texto_antes_primeiro_bloco.strip())


    for i, (titulo, conteudo) in enumerate(blocos, 1):
        print(f"\n--- Bloco {i}/{len(blocos)} ---")
        print(f"üîç Analisando: {titulo}")
        
        # Adiciona o t√≠tulo e o conte√∫do original ao arquivo revisado
        conteudo_revisado.append(f"\n{titulo}\n\n{conteudo}\n")

        resposta_ollama = rodar_ollama(conteudo)
        
        print(f"\n‚úÖ Sa√≠da do modelo para '{titulo}':\n")
        print(f"{resposta_ollama}\n")
        
        # Adiciona a resposta do Ollama ao conte√∫do revisado para o novo arquivo
        conteudo_revisado.append(f"\n\n### Sugest√£o de Revis√£o do Ollama para '{titulo}':\n{resposta_ollama}\n")
        conteudo_revisado.append("-" * 80 + "\n") # Separador para o arquivo de sa√≠da

    print("\n\nüéâ Processamento de todos os blocos conclu√≠do!")
    
    # Salva o conte√∫do revisado em um novo arquivo
    try:
        with open(ARQUIVO_SAIDA, "w", encoding="utf-8") as f:
            f.write("\n".join(conteudo_revisado))
        print(f"üíæ As revis√µes foram salvas em '{ARQUIVO_SAIDA}'")
    except IOError as e:
        print(f"‚ùå ERRO ao salvar o arquivo '{ARQUIVO_SAIDA}': {e}", file=sys.stderr)

    print("\n--- Fim do script ---")

if __name__ == "__main__":
    main()